plugins {
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.example.http.headers'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}



dependencies {

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.4.RELEASE'
	// https://mvnrepository.com/artifact/io.rest-assured/rest-assured
	//itestCompile 'org.springframework.boot:spring-boot-starter-web'
	//itestCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile group: 'io.rest-assured', name: 'spring-mock-mvc', version: '3.3.0'
	testCompile 'org.springframework.boot:spring-boot-starter-test'
}

sourceSets {
	itest {
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
		// You can add other directories to the classpath like this:
		//runtimeClasspath += files('src/itest/resources/com/buransky')
		// Use "java" if you don't use Scala as a programming language
		java.srcDir file('src/itest/main/java')
	}

	integrationTest {
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
		// You can add other directories to the classpath like this:
		//runtimeClasspath += files('src/itest/resources/com/buransky')
		// Use "java" if you don't use Scala as a programming language
		//java.srcDir file('src/itest/main/java')
		java.srcDir file('integrationTest/src/main/java')
	}
}

configurations {
	itestCompile.extendsFrom testCompile
	itestRuntime.extendsFrom testRuntime

	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}